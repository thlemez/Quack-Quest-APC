/ struct do retangulo invisivel q fica ao redor do pato
        Rectangle patorec = {
        cord.x, 
        cord.y,
        patoheight,
        patowidth
        };

        // Atualizar a posição do pato
        patorec.x = NewPos1.x;
        patorec.y = NewPos1.y;

        bool collision = false;
        //struct do retangulo invisivel q fica ao redor da pedra e loop q detecta colisao entre os dois rentanfulos : pedra e pato 
        for (int i = 0; i < NUM_PEDRASM1; i++) {
            Rectangle pedrarecM1 = {
                posicao_pedraM1[i].x,
                posicao_pedraM1[i].y,
                pedrawidth,
                pedraheight
            };

            if (CheckCollisionRecs(patorec, pedrarecM2)) {
                collision = true;
                break; // sair do loop se houver colisão
            }
        }

        // Se não houver colisão, atualizar a posição do pato
        if (!collision) {
            cord = NewPos1;
        }



        // Atualiza a posição do caçador
        Vector2 NewPos2 = cacadorPos;
        NewPos2.x += cacadorDir.x * 1.0f;
        NewPos2.y += cacadorDir.y * 1.0f;

        // Verificar limites da janela para o caçador (teleporte)
        if (NewPos2.x > screenWidth + 50) NewPos2.x = 0;
        else if (NewPos2.x < -50) NewPos2.x = screenWidth;
        if (NewPos2.y > screenHeight + 50) NewPos2.y = 0;
        else if (NewPos2.y < -50) NewPos2.y = screenHeight;

        // Retângulo de delimitação do caçador
        Rectangle cacadorrec = {
            cacadorPos.x,
            cacadorPos.y,
            patoheight,
            patowidth
        };

        // Atualiza a posição do retângulo de delimitação do caçador
        cacadorrec.x = NewPos2.x;
        cacadorrec.y = NewPos2.y;

        // Verificar colisão com obstáculos para o caçador
        bool cacadorCollision = false;
        for (int i = 0; i < NUM_PEDRASM1; i++) {
            Rectangle pedrarecM1 = {
                posicao_pedraM1[i].x,
                posicao_pedraM1[i].y,
                pedrawidth,
                pedraheight
            };

            if (CheckCollisionRecs(cacadorrec, pedrarecM1)) {
                cacadorCollision = true;
                break; // Sai do loop se houver uma colisão
            }
        }

        // Se não houver colisão, atualiza a posição do caçador
        if (!cacadorCollision) {
            cacadorPos = NewPos2;
        }

